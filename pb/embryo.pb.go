// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: embryo.proto

package embryo_pb

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Embryo struct {
	Data                 []byte           `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Links                [][]byte         `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
	AuthorKey            []byte           `protobuf:"bytes,3,req,name=authorKey" json:"authorKey,omitempty"`
	Signature            []byte           `protobuf:"bytes,4,req,name=signature" json:"signature,omitempty"`
	Channels             []*UpdateChannel `protobuf:"bytes,5,rep,name=channels" json:"channels,omitempty"`
	Parent               []byte           `protobuf:"bytes,6,opt,name=parent" json:"parent,omitempty"`
	AuthorInfo           []byte           `protobuf:"bytes,7,opt,name=authorInfo" json:"authorInfo,omitempty"`
	Timestamp            *int64           `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	Tags                 *Dictionary      `protobuf:"bytes,9,opt,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Embryo) Reset()         { *m = Embryo{} }
func (m *Embryo) String() string { return proto.CompactTextString(m) }
func (*Embryo) ProtoMessage()    {}
func (*Embryo) Descriptor() ([]byte, []int) {
	return fileDescriptor_241390be6a83bb4a, []int{0}
}
func (m *Embryo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Embryo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Embryo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Embryo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Embryo.Merge(m, src)
}
func (m *Embryo) XXX_Size() int {
	return m.Size()
}
func (m *Embryo) XXX_DiscardUnknown() {
	xxx_messageInfo_Embryo.DiscardUnknown(m)
}

var xxx_messageInfo_Embryo proto.InternalMessageInfo

func (m *Embryo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Embryo) GetLinks() [][]byte {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Embryo) GetAuthorKey() []byte {
	if m != nil {
		return m.AuthorKey
	}
	return nil
}

func (m *Embryo) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Embryo) GetChannels() []*UpdateChannel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *Embryo) GetParent() []byte {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Embryo) GetAuthorInfo() []byte {
	if m != nil {
		return m.AuthorInfo
	}
	return nil
}

func (m *Embryo) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Embryo) GetTags() *Dictionary {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateChannel struct {
	Format               *string  `protobuf:"bytes,1,req,name=format" json:"format,omitempty"`
	Address              *string  `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateChannel) Reset()         { *m = UpdateChannel{} }
func (m *UpdateChannel) String() string { return proto.CompactTextString(m) }
func (*UpdateChannel) ProtoMessage()    {}
func (*UpdateChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_241390be6a83bb4a, []int{1}
}
func (m *UpdateChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChannel.Merge(m, src)
}
func (m *UpdateChannel) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChannel.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChannel proto.InternalMessageInfo

func (m *UpdateChannel) GetFormat() string {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return ""
}

func (m *UpdateChannel) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type KeyValuePair struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_241390be6a83bb4a, []int{2}
}
func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return m.Size()
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Dictionary struct {
	Pairs                []*KeyValuePair `protobuf:"bytes,1,rep,name=pairs" json:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Dictionary) Reset()         { *m = Dictionary{} }
func (m *Dictionary) String() string { return proto.CompactTextString(m) }
func (*Dictionary) ProtoMessage()    {}
func (*Dictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_241390be6a83bb4a, []int{3}
}
func (m *Dictionary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dictionary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dictionary.Merge(m, src)
}
func (m *Dictionary) XXX_Size() int {
	return m.Size()
}
func (m *Dictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_Dictionary.DiscardUnknown(m)
}

var xxx_messageInfo_Dictionary proto.InternalMessageInfo

func (m *Dictionary) GetPairs() []*KeyValuePair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*Embryo)(nil), "embryo.pb.Embryo")
	proto.RegisterType((*UpdateChannel)(nil), "embryo.pb.UpdateChannel")
	proto.RegisterType((*KeyValuePair)(nil), "embryo.pb.KeyValuePair")
	proto.RegisterType((*Dictionary)(nil), "embryo.pb.Dictionary")
}

func init() { proto.RegisterFile("embryo.proto", fileDescriptor_241390be6a83bb4a) }

var fileDescriptor_241390be6a83bb4a = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe5, 0xa4, 0xb7, 0x9c, 0x06, 0x09, 0x59, 0x5c, 0x3c, 0xa0, 0xc8, 0xca, 0x64, 0x06,
	0x3a, 0x54, 0x88, 0x85, 0x89, 0xdb, 0x80, 0xba, 0x20, 0x4b, 0xb0, 0x9f, 0x36, 0x6e, 0x1b, 0xb5,
	0xb9, 0xc8, 0x76, 0x91, 0xf2, 0x40, 0xbc, 0x0b, 0x23, 0x8f, 0x80, 0xfa, 0x24, 0xc8, 0x49, 0x2f,
	0x61, 0x3b, 0xdf, 0xf9, 0xff, 0xc4, 0x9f, 0x0e, 0x84, 0x2a, 0x9b, 0xea, 0xaa, 0x18, 0x95, 0xba,
	0xb0, 0x05, 0x0d, 0xf6, 0x34, 0x8d, 0xbf, 0x3c, 0xe8, 0xbd, 0xd4, 0x44, 0x29, 0x74, 0x12, 0xb4,
	0xc8, 0x08, 0x27, 0x22, 0x94, 0xf5, 0x4c, 0xcf, 0xa0, 0xbb, 0x4e, 0xf3, 0x95, 0x61, 0x1e, 0xf7,
	0x45, 0x28, 0x1b, 0xa0, 0x57, 0x10, 0xe0, 0xc6, 0x2e, 0x0b, 0x3d, 0x51, 0x15, 0xf3, 0xb9, 0x27,
	0x42, 0x79, 0x5c, 0xb8, 0xd4, 0xa4, 0x8b, 0x1c, 0xed, 0x46, 0x2b, 0xd6, 0x69, 0xd2, 0xc3, 0x82,
	0xde, 0xc2, 0x60, 0xb6, 0xc4, 0x3c, 0x57, 0x6b, 0xc3, 0xba, 0xdc, 0x17, 0xc3, 0x31, 0x1b, 0x1d,
	0x74, 0x46, 0xef, 0x65, 0x82, 0x56, 0x3d, 0x35, 0x05, 0x79, 0x68, 0xd2, 0x0b, 0xe8, 0x95, 0xa8,
	0x55, 0x6e, 0x59, 0xaf, 0xb6, 0xdb, 0x11, 0x8d, 0x00, 0x9a, 0x87, 0x5f, 0xf3, 0x79, 0xc1, 0xfa,
	0x75, 0xd6, 0xda, 0x38, 0x17, 0x9b, 0x66, 0xca, 0x58, 0xcc, 0x4a, 0x36, 0xe0, 0x44, 0xf8, 0xf2,
	0xb8, 0xa0, 0xd7, 0xd0, 0xb1, 0xb8, 0x30, 0x2c, 0xe0, 0x44, 0x0c, 0xc7, 0xe7, 0x2d, 0x8f, 0xe7,
	0x74, 0x66, 0xd3, 0x22, 0x47, 0x5d, 0xc9, 0xba, 0x12, 0x3f, 0xc0, 0xc9, 0x3f, 0x37, 0x67, 0x34,
	0x2f, 0x74, 0x86, 0x96, 0x11, 0xee, 0x89, 0x40, 0xee, 0x88, 0x32, 0xe8, 0x63, 0x92, 0x68, 0x65,
	0xdc, 0xcd, 0x5c, 0xb0, 0xc7, 0xf8, 0x0e, 0xc2, 0x89, 0xaa, 0x3e, 0x70, 0xbd, 0x51, 0x6f, 0x98,
	0x6a, 0x7a, 0x0a, 0xfe, 0x4a, 0x55, 0xbb, 0xcf, 0xdd, 0xe8, 0xae, 0xfd, 0xe9, 0x62, 0xe6, 0x71,
	0x22, 0x02, 0xd9, 0x40, 0x7c, 0x0f, 0x70, 0xd4, 0xa1, 0x37, 0xd0, 0x2d, 0x31, 0xd5, 0x86, 0x91,
	0xfa, 0x78, 0x97, 0x2d, 0xe9, 0xf6, 0xdf, 0x65, 0xd3, 0x7a, 0x0c, 0xbf, 0xb7, 0x11, 0xf9, 0xd9,
	0x46, 0xe4, 0x77, 0x1b, 0x91, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0xe6, 0xab, 0x02, 0x07,
	0x02, 0x00, 0x00,
}

func (m *Embryo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Embryo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Links) > 0 {
		for _, b := range m.Links {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEmbryo(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.AuthorKey == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("authorKey")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(m.AuthorKey)))
		i += copy(dAtA[i:], m.AuthorKey)
	}
	if m.Signature == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("signature")
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintEmbryo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Parent != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if m.AuthorInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(m.AuthorInfo)))
		i += copy(dAtA[i:], m.AuthorInfo)
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(*m.Timestamp))
	}
	if m.Tags != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(m.Tags.Size()))
		n1, err := m.Tags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Format == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("format")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(*m.Format)))
		i += copy(dAtA[i:], *m.Format)
	}
	if m.Address == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("address")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(*m.Address)))
		i += copy(dAtA[i:], *m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeyValuePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValuePair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEmbryo(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Dictionary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dictionary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, msg := range m.Pairs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEmbryo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEmbryo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Embryo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, b := range m.Links {
			l = len(b)
			n += 1 + l + sovEmbryo(uint64(l))
		}
	}
	if m.AuthorKey != nil {
		l = len(m.AuthorKey)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovEmbryo(uint64(l))
		}
	}
	if m.Parent != nil {
		l = len(m.Parent)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.AuthorInfo != nil {
		l = len(m.AuthorInfo)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.Timestamp != nil {
		n += 1 + sovEmbryo(uint64(*m.Timestamp))
	}
	if m.Tags != nil {
		l = m.Tags.Size()
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Format != nil {
		l = len(*m.Format)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovEmbryo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dictionary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovEmbryo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEmbryo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEmbryo(x uint64) (n int) {
	return sovEmbryo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Embryo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmbryo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embryo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embryo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, make([]byte, postIndex-iNdEx))
			copy(m.Links[len(m.Links)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorKey = append(m.AuthorKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthorKey == nil {
				m.AuthorKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &UpdateChannel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorInfo = append(m.AuthorInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthorInfo == nil {
				m.AuthorInfo = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = &Dictionary{}
			}
			if err := m.Tags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmbryo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmbryo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("authorKey")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("signature")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannel) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmbryo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Format = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipEmbryo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmbryo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("format")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("address")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValuePair) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmbryo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValuePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValuePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmbryo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmbryo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dictionary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmbryo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dictionary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dictionary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEmbryo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, &KeyValuePair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmbryo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmbryo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmbryo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmbryo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmbryo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEmbryo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEmbryo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEmbryo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEmbryo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmbryo   = fmt.Errorf("proto: integer overflow")
)
